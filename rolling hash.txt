int power(int x, int y){
  int sum = 1;
  while(y){
    if(y & 1)
      sum = (sum * x) % mod;
 
    x = (x * x) % mod;
    y >>= 1;
  }
  return sum;
}
int gethash(string s){
  int ans = 0;
  int pp = 1;
  for(int i = 0; i<s.length(); i++){
    ans = (ans + (s[i] - 'a' + 1 ) * pp) % mod;
    pp = (pp * 31) % mod;
  }
  return ans;
}
void pre(string s){
  inverse[0] = 1;
  int pp = 1, ans = 0;
 
  for(int i = 0; i<s.length(); i++){
    ans = (ans + (s[i] - 'a' + 1) * pp) % mod;
    pp = (pp * 31) % mod;
    dp[i + 1] = ans;
    inverse[i + 1] = power(pp, mod - 2);
  }
}
int midhash(int l, int r){
  int temp = (dp[r] - dp[l-1] + mod) % mod;
  return (temp * inverse[l - 1]) % mod;
 }


// for more precision get check for pair of hashes (2nd one with pp * 29 and mod 2 = 99...(new prime number)) making collisions = #pairs / (mod1 * mod2) from #pairs / mod 