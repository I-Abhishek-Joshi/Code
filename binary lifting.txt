#include<bits/stdc++.h>
#define pb push_back
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define SORT(v) sort(all(v))
#define int long long
#define ff first
#define ss second
#define mod 1000000007
#define endl "\n"

using namespace std;

void oj()
{
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  #ifndef ONLINE_JUDGE  
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif
}

int n, q;
vector<int>v[500005];
int lca[500005][30];
int level[500005];
int parent[500005];
void dfs(int x, int par, int l)
{
  lca[x][0] = par;
  level[x] = l;
  parent[x] = par;
  for(int i = 1; i <= log2(n); i++)
    lca[x][i] = lca[lca[x][i - 1]][i - 1];

  for(auto el : v[x])
  {
    if(el ^ par)
      dfs(el, x, l + 1);
  }
}
int find(int x, int y)
{
  if(level[x] > level[y])
    swap(x, y);

  int d = level[y] - level[x];
  while(d)
  {
    int i = log2(d);
    y = lca[y][i];
    d -= (1<<i);
  }
  if(x == y)
    return x;

  for(int i = log2(n); i >= 0; i--)
  {
    if(lca[x][i] != -1 && lca[x][i] != lca[y][i])
    {
      x = lca[x][i];
      y = lca[y][i]; 
    }
  }

  return parent[x];
}

void solve()
{
  cin>>n>>q;
  for(int i = 0; i < n - 1; i ++)
  {
    int x, y; cin>>x>>y;
    v[x].pb(y);
    v[y].pb(x);
  }

  dfs(1, 0, 0);

  while(q--)
  {
    int a, b; cin>>a>>b;
    cout<<find(a, b)<<endl;
  }


}
signed main()
{
  oj();
  // int t; cin>>t;
  // while(t--)
    solve();

  return 0;
}
